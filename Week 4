https://d396qusza40orc.cloudfront.net/projects101/lecture_slides/Week4Slides.pdf

4.1 From Plan to Action (5:32)
Set of dependencies between the different taks associated with the project.
We were able to look at the network diagram and identify our critical path.
(video 01:00)
With that in mind, we could focus on the subset of tasks that will be
crucial for us as we walk through the project and which will be our central
attention, our critical tasks. These will guarantee that if we execute these
tasks on time, we will complete the project on time, as we expect.
(video 01:21)

(video 02:00) Project Life - Cycle -> Focusing on the execution stage
Initiate->Plan->Execute->Close

Initiate:
.Establish Organization
.Project charter and definition

Plan:
.Identify scope
.Identify tasks, dependencies and schedule
.Plan resources
.Clarify trades-offs and decision making principles
.Develop a risk management plan

Execute:
.Monitor
.Communicate and report
.Correct and control

Close:
.Sign off
.Conduct a formal post-mortem

Focusing on the execution stage, we tend to think about the following dimensions
How during the execution are we goingo to monitor our progress?
How will we communicate amongst the team and outside externally to the others
stakeholders?
Who will be doing the reporting?
How will we correct and take action when something isn't progressing as planned.

As we think about the execution, we think about monitoring (video 02:37)
Project Execution: Execute/Correct_and_Control/Monitor/Report_Collect
How will the monitoring be done?
Will it be physical or virtual?
Is our project manager in the same location as the teams?
Do they work together in such a way that they can actually view the work?
Or perhaps is a virtual system for collaborative platform going to be used.
And how often should we ve looking at it?
Are we going to look at our system every day and expect updates to be made in real time?
Or are we going to be looking at it on a weekly or bi-weekly basis?
Is there a central project management office?
Does that office aggregate information from multiple projects in an organization, and 
do they share the same resources?
Does the project manager get support from that office and have others on his team who can
help him work through any problems that come up?
What information will actually be monitored?
Are we monitoring in time?
Are we monitoring the actual costs?
And how are we going to be monitoring functionality of the product as we execute and develop
the product?
In terms of reporting and collecting the information, this is a not a trivial step
How often are we expecting updates reports?
Are we expecting our team to call us everyday and to tell us how they're doing?
Are we scheduling a weekly meeting to talk about the execution and the progression
of the project?
Who is going to be in charge of these meetings?
Who is going to attend them?
Are only the individual associated with the tasks going to show up?
Or are all the stakeholders or related parties going to show up in order to share and
learn from the execution of our project.
Once we've collected the information and the reporting has been done, then what?
How do we correct action if something has gone wrong?
If a red flag is raised and we are behind schedule, what do we do ?
(video 04:26)
It is important identify what sort of decisions will be made.
Do we have some flexibility in terms of the scope?
And who can make the call on reducing the scope?
Who has the ability to hire additional personnel or to outsource and to seek an
expert to come and help us solve a problem?
Assuming that we have reached a conclusion that we need to take action, and we've
taken a corrective action and gone out and found an expert to help us, How will we
communicate to the rest of the team where we're heading from here?
How will updates be communicated in terms of change of directions and an alternative
path that we're all going to have to follow from this point onwards?
These are the types of questions that are on our mind as we work through the execution,
as we start the execution, and throughout the entire execution of the project. And we
will se several different ways in which this can be done.

--__--__--__

4.2 Earned Value (12:14)

(video 00:30)
(video 00:40)
(video 01:35)
(video 02:15)
Update our plan.
We can use many different whichever package you're using but most programs project management
software tools out there will allow you to update the progress in the plan
(video 03:07) highlight % completed
(video 04:05) Earned Value Analysis 
.Creative: 25% completed, actual cost $500
.Schedule work = 40% (2w/5w)
.Actual work   = 25% (1.25w/5w)
.Budget Cost   = $1,000
.Planned Value = 40% x 1,000 = $400
.Earned Value  = 25% x 1,000 = $250
Actual Cost    = $500

.Schedule Performance Index (SPI) = Earned Value / Planned = 63%
.Cost Performance Index (CPI) = Earned Value / Actual = 50%
We Know that if things were going as planned, we are 2 weeks into the project. By now we expect
to do 2 weeks of work out of a 5 week task. We expect it to be about 40% done.
So far,if we were progressing as planned, we would have spent, or we would have completed 40%
of the work, and therefore, we expect to have spend 40% of the budget, implying that our planned
value, what we planned to spend at this time was $400.
What we've earned, what our work has earned, what the work that we actually completed has
earned us, 25% of the budget would imply that we've earned $250 worth of spending.
But our actual spending was %500, there seems to be some variance here.

(video 05:27)We can identify several sources of variance; that we are about 0.75
just under a week behind where we should have been at this point in time.
(video 05:31)We can also see that we are about $150 behind our scheduled work.
video(05:40)We can also spot, looking at the difference between 250 and the 500, that we have
about $250 worth of variance in terms of the actual spending that we've entailed in our 
project.

From the schedule perspective we're going to be looking at the schedule performing index.
(video 06:05)We're going to be looking at how much we've earned for the work that we've done
versus what we plan to do in terms of this over this time. So in the 2 weeks we planned to do
40% of the work we plan to spend $400, but we've actually earned from the work that we've
completed $250. Our scheduled performance index is 0.63, or 63%.
As a benchmark, 100% or 1 would have been on track, that means our work was performed on time.
And right now there's some indication that we are behind. We haven't completed the amount of 
work that we thought we would at this point in time.
From the cost performance perspective, well, here we can also measure a similar component, or
a similar index. We can look at our earned value, how much we've actually earned in terms of 
the work and what the actual spending was, or what the actual spending that we've reported.
250 of the work that we've actually achieved divided by 500 gives us around a 50% competion rate
Meaning our cost is about 50% over budget. Again, a 100% index would have indicated that we're 
on budget.
These 2 indices are helpful as we track our project to check all the time, are we working as we
planned and progressing on schedule, and are we spending the correct amount of money?
 
 (video 07:33) Performance indices
 On track: Schedule Performance Index (SPI) = 1
 On track : Cost Performance Index (CPI) = 1
 If we fall beneath the line, the dotted line which is 100%, we want to raise some flags. We are
 over budget and we are behind in terms of our schedule. The lower that number, the more severe
 the situation is. The lower the number, the more over budget we may be. Or the later we are and
 we had not done as much work as we have hoped.
 Why might we want to flag situations in which our industries shoot up?
 What happens if we get some report around progressing 120%, meaning that we're ahead of schedule
 and that we're under budget. here too we may want to raise some flags. Are we neglecting some
 component of the scope?
 Have we missed out some critical tasks or some crucial task in terms of the functionality that are
 expected to be delivered at the end of the day?
 Are we not performing the tasks or executing properly, and are we maybe cutting corners or rushing
 too quickly?
 Any deviation from that band of approximately 100% on both of these dimensions might raise some 
 red flags.
 This framework is used widely in the industry. It was developed by the Department of Defense and today,
 in the government in the U.S. in particular, but internationally too.
 These types of measures are used in an ongoing basis. to report and to collaborate and to monitor the
 execution of projects. Individuals, subcontractors or even within the same organization will typically
 talk about how well they're doing on the schedule performance index and on the cost performance index
 
 The software tools that we use are helpful, as well. They will give us the analysis, so they will do the
 calculation for us and we can use the built in functionality to look at how we'll we're doing. We can
 input the progress, and we can look at our variances and our performance indicators.
 
 (video 09:47) Earned Value Analysis
 In this case, just to summarize, we have the 3 tasks that we've made some progress on, and we see that we
 can update our schedule to view how the 3 tasks, Creative, Strategy and IT, are doing in terms of our cost
 performance index and our schedule performance index. We see here, for instance, that specifically the
 strategy task. seem to actually be under budget. so far we haven't spent as much money as we thought we
 would for the amount of work that we've done.
 Overall though, are we in trouble?
 Overall as a project, do we need to make critical changes to our project?
 To the execution?
 Do we need to find additional resources to help us get things back on track?
 Using the tools and the software packages, we can also update our project plan. We can assume that we're
 going to continue moving forward in the same pace that we've moved so far.
 Giving us a re-calculation of our project, we can see that our critical path has stayed the same. Still
 the Creative task, the Sales taks and the Finance task are still critical in this Gantt chart. 
 (video 10:56)We can see the delay become real. We can see that overall we have an additional, just under 0.75
 week added to the expected completion of our project. And given information that we have some so far, we
 see that we'll be going just a little bit over our budget that we had anticipated. Instead of $8,500, we're
 looking more like just under $9,000.
 What is our conclusion?
 Are we in trouble?
 Perhaps we can afford to be delayed by just under a week
 Do we need to make sure that from now on everything takes places properly and everything is executed as planned?
 Of course we do.
 Any additional delays later in the project will just continue to push our deadlines further.
 And so the fact that we've just started, we are 2 weeks into our project and we're already a little bit delay,
 might require some attention. We know that we have an additional $425 in our expected spending. Perhaps we
 want to think about how we will find that already at this point in time or maybe find opportunites to save
 latter on in the life of our project.
 But now we have a good idea on how things are progressing and where we stand in terms of our cost and the schedule
 of our product.
 
 --__--__
 
 4.3 Those Who Execute (08:32)
 
 Project Management paradox:
 We have sofisticate tools, we're all now expert in how to plan a project, how to think about the risks and to come up
 with a good risk management plan.
 We know how to think about the execution and what type od system we would like to put in place to monitor, report and
 to take corrective action. But still most projects fail. They are either too late, or they go and run over budget, 
 and sometimes, both; Their functionality suffers.
 And so what is it in the execution itself?
 What are the components that actually lead us astray? What are the systems, or why are the reasons that we can find.
 That's projects don't progress as smoothly as we've hoped that they would. and even our best risk plans or risk
 management plans don't help us in cases of emergency.
 We can identify several sources. Let's think about technical factors and then let's think of individual factors or
 human component.
 (video 01:06) Why are Projects still Late? Over Budget?
 - Technical factors:
  .Internal Complexity
  .External complexity

- Human factors:
  .Multi-tasking
  .Parkinson's Law
  .Student Syndrome
  .Team work

Then let's think of individual factors or human component.
On the technical side, we have the complexity dimension, we have complex projects with many interactions between many
different tasks that could lead to unknown or unexpected outcomes. Not only are the tasks linked and dependent upon
each other, there are many of them, but sometimes they depend on external functionalities and external parties that all
come together during the execution of the project.
We have internal complexity in our firm, in our company and we have external factors, regulation that has changed and
weather emergencies or changes in the environment, or perhaps suddenly a competitor has launched a product onto the 
market that we need to react to that put us, take us in a completely different direction, and actually implies a cost
over-run for our project and a delay to our schedule.

Those are some factors that exist in many settings, but other factors exist as well, and they have to do with the humans
They have to do with our, the nature in which we operate, and how we all like to work on a day-to-day basis.
One of the key factors that ultimately leads to delay is the fact we like to multi-task and can add a huge amount of extra
time to our project, it always take us a few minutes to rethink about what it was that we were doing, or get back into the
zone of a specific item that we were working on. If we step away physically, it could be demanding, and we could add some
physical time into it by just multitasking and moving from one thing to the next, but there's also an obvious reason why
multitasking is problematic, and why it delays the delivery.
(video 03:47) Why is Multi-tasking bad?
There is some satisfying aspects of multitasking by the fact that we can report some progress on all 3 dimensions. But 
in reality it implies that we will be delayed in transitioning each one of these tasks down the road. And of course this 
is the best case scenario in reality, when we start to multitask, there will be additional transition time between the
different activities. It is very important that we realize that the multitasking activity that we might choose to engage in
does have implications in terms of the schedule of our project.

2 others factors we've mentioned in the past that have to do with how individuals actually execute on work will lead to some
delays in our project or will imply that we might face some scheduling issues throughout the execution. Parkinson's Law and
Student Syndrome.
Parkinson's law implies that if we're given an alloted amount of time we will fill it up, we will work throughout the entire
duration. Meaning if we are, we're told that we have week to complete a task we will take a week to complete the task and
even if we don't, we are not that likely to go ahead and deliver a piece of work sooner.
Student syndromes implies that if we have some slack we will probably procrastinate. We will take advantage of that slack and
actually perform the tasks that we're expected to do at the last, at the very last minute.
We can put in place some mechanisms that allow us to overcome some of these phenomena and to perhaps speed up the delivery 
of our project, or be less likely to run over, overtime and indeed overbudget.

Thinking about working in smaller teams, breaking up the work into smaller components and allowing our team to be more
independent in selecting those activities will encourage us all to work in a more efficient way. If we work on smaller pieces
of work, we're less likely to multi-task, because we can feel more satisfaction sooner by completing a task in front of us.
If we work as a team, we might be more inclined to actually report that we have completed early, because we know that case,
if we become available, me can help a team member and help them solve their problem. because we have completed early, And 
next time, when we're delayed, we know that somebody will come and help us out as well.
Instead of working with individual task units and individual buffers on each and task that we're assigned, think about
the buffer on a project level. Step back and combine forces and say, we'll each try our best to complete a task as soon as
we can. and we'll allow ourselves some room to maneuver on a project level. Again, that will encourage us to actually
speed our work up, report that we're done, and go ahead and help our team work towards that overall goal of meeting our
project completion time. And so small changes to the way that we divide up the work and the way that we organize our work
flow might help us overcome some of the phenomena that induce extra time and extra budget in our projects.

--__--__

4.4 Agile, Scrum, and Kanban (14:33)

What Agile?
.Software development firms
.Release pace was declining
.Quality was suffering
.Engineer moral
.Padding and no accountability


The background behind agile has to do with software development firms around the year 2000. Many of the firms were
growing. Firms that started as small start-ps were building a reputation, were sucesful and acquiring a larger size
development team.

As a result of the company growth, what happened in returns was a slowdown of the release peace, meaning the release
schedule was slowed down. They were realising the product to the market not as frequently as wanted to, or not as
frequently as they did when they were small and nimble.

In additional to a slower release pace, the quality of the also declined, and there was a bigger mismatch between what
the customer wanted and the product was being delivered.

The engineers that were working on the products were feeling the hit, the morale was low. They wanted to be part of a 
small and nimble company where they touched the customer and they felt the impact and the benefits of their development, 
they wanted to be proud of their work and they wanted to know that when they work, it immediately affects a customer
out there.

And in additional, because of this, they were padding the durations of their tasks, they were not accountable or
defending themselves in terms of how they stuck up for their work , or they would step up to help correct problems
ans they emerged, because this fenomena in a lot of companies, the companies felt need to make some changes.
A group of 17 visionaries came together around the year of 2001 and decided to sign what they saw as the vision of
software development, the Agile Manifesto.
They collaborated on a document to come up with a set of principles that would guide the way that they thought about
software development. They focused on a few items. First and foremost, they value individuals are interactions.
They wer going to focus on delivering working software, and on customer, and constant customer collaboration.
They were going to be looking at responding to change and not necessarily following a predetermined plan that was
set up front. They need for a general plan.

Agile Manifesto
Manifesto for Agile Software Development
We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have
come to value:
Individual and interactions over processes and tools
Workin software over comprehensive documentation
Customer collaboration over contract negotiation
Responding to change over following a plan
That is, while there is value in the items on the right, we value the items on the left more.
www.agilemanifesto.org

Quite a few principles were drafted as the backbone to the manifesto. How do they execute the manifesto?

Agile Principles and Manifesto
We follow these principles:
1. Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.
2. Welcome changing requirements, even late in development. Agile processes harness change for the customer's
competitive advantage.
3. Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter
timescale
4. Business people and developers must work together daily throughout the project.
5. Build projects around motivated individuals. Give them the environment and support they need, and trust them to get
the job done.
6. The most efficient and effective method of conveying information to and within a development team is face to face
conversation.
7. Working software is the primary measure of progress.
8. Agile processes promote sustainable development. The sponsors, developers and users should be able to maintain a 
constant pace indefinitely.
9. Continuous attention to technical excellence and good design enhances agility.
10. Simplicity-the art of maximizing the amount of work not done-is essential.
11. The best architectures, requirements, and designs emerge from self-organizing teams.
12. At regular intervals, the team reflects on how to become more effective, thenm tunes and adjusts its behavior accordingly

(video 05:00)
Talk about 2 mechanisms that execute and implement the agile ideas
2 Agile variations:
1-Scrum Sprints
"An iterative framework within which people can address complex adaptive problems while productively and creatively
delivering products of the highest possible value"   www.scrumguides.org

2-Kanban
Continuos flow model with no iterations. Suited for short-cycle deliverables, limiting work in progress.

Whether you're working in definied sprints and following a Scrum approach, or whether you're working in a Kanban
mechanism in wich you're constantly delivering to the client but limiting the amount of ongoing work, you're still
working agile. you're working in small units of work of pieces of work, you working in small cohesive teams and you're
putting the costumer's needs and the idea of delivering a working software as a top priority.

(video 06:09) Agile (Scrum) Team
.Cross-functional (programmers, test, design)
.Members should be committed full-time
.Self-organizing team

Developers->Scrum master->Product owner->Customer

First, we must have a Scrum Team. The scrum team is very well defined and it is a necessity to have it in place in order
to work in this fashion.
We need a group of developers. They need to have a Scrum master who has been trained as a Scrum master.
A product owner that serves as a liaiser between the Scrum master and the team and the Customer.
And we need a Customer involved throughout the entire process.

The group of developers have to be cross-functional, because it will require to complete the entire steps that are 
necessary to deliver a working product. If that means we need a coder, and we need somebody to do the QA, then we need them
all working together as part of a Scrum team.

It is self-organizing, they have the capability with their Scrum master to vet which features they can conduct and they can
execute on and what might they need in order to push the needle forward.

The Scrum master is in charge of taking care of the Scrum Team. He is in charge of blocking and tackling anything that might
get in their way. He is in charge of coordinating the different individuals and allowing them to help each other and to 
have a constant flow of information among them.
The product owner is the one that sets the priorities.
What should te team be working on in this specific iteration?
And the product owner gets that knowledge from constant dialogue with the customer.
How did they value the previous features, and what would they like to see in place in the next iteration?
This scrum teams works together during a sprint. They work on many sprints in a given year.
The sprints are typically anywhere betwwen one week sprint to four weeks sprint.
The idea of sprint is that we work intensely on a set of ideas or a set of features that we've defined at the beginning of
the sprint. and that at the end of the sprint we deliver a product to the customer.
(video 08:07) Tipically firms start off with a product backlog, a list of features that need to go into our product at the
end of the day, or a list of features that together, with the costumer, we've identified as worthy of working on.
At the beginning of the sprint we will identify what goes into the sprint backlog.
Wich features are we putting in front of us to work on, say in the next 2 weeks?
During the next 2 weeks, in an iterative fashion, the team members take whatever they're comfortable with, whatever piece of
work they're expert in, and they progress on the work on delivering those features.
They might iterate among themselves using code, doing some documentation, checking it out and fixing some bugs. Or they might
wait, work in a more sequential fashion. but that is up to them, to the self-organizing team. At the end of the sprint, 
they deliver whatever works to the client, they deliver a working feature ti the client.
What is crucial in the sprint is maintaining and monitoring the different, and making sure that you execute on the 
different meetings that are scheduled. The meetings set the tone for the entire sprint and they ensure that the sprint 
delivers on its promise. it delivers a working product to the customer and the team is satisfied in the way it's working
together.
(video 09:17) hese are the meeting that we need to ensure that occur throughout the sprint. First, we start off with a 
sprint planning. We plan which of the items from the product backlog go into our sprint backlog. Them during the execution,
during the sprint itself, we go through a daily stand up, a daily scrum meeting, a standing up meeting. No one sits down.
Maybe 15 minutes in which we share our experience and flag, or raise some flags, if need be, if we are reaching some
problematic area. We talk and communicate as to what we're planning to do that day, and what we were able to achieve the
fay before. Those daily stand up meetings are vital as we progress through the scrum in its quick and rapid pace.
Once the product is ready at the end of the sprint, we conduct a sprint review, and the customer's in the sprint review
helping us understand what they feel about the features that we've developed and how they might be using it to test it out.
And finally, we conduct an internal Sprint Retrospective, reflecting on what went well and what did not go as well and how
we can improve in the next sprint moving forward.

-Benefits to Agile
  .Empowers the Development team
  .Developers want to deliver a product to the client.
-Creates joint incentives and transparency with the client.
-Helps firms build the right thing, at the right time, and build it right!

Contention Around Agile
-A "living in the moment" culture
-Less documentation
-#noestimates movemet
-Hard to master-requires the right mindset
-Can be challenging with distributed teams

How is our project going to be executed?
And whether or not the tools that we've introduced so far are appropriate. In many cases, we might find ourselves
picking and choosing. We might do some documentation and proper planning following a critical path and coming up
with our Gantt chart and actually execute our project using earned value analysis. We may choos a specific sub-group
or a specific functionality within our larger project to work in a more agile way. Assuming it is possible, we have a 
customer that will collaborate and interact with us and we have a small enough team that can be devoted to the project
and can work together to deliver small units of work and, during quick iterations.
Having the tools to identify what is needed for each methodology to worl and to be successful is a vital part of being
successful as a project manager and ultimately executing on a meaningful and successful project.

